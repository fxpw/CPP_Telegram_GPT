name: Cross-Platform Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    env:
      app_name: cpp_telegram_gpt
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up CMake
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y cmake
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        fi
      shell: bash

    - name: Install vcpkg and setup environment
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        if [ "$RUNNER_OS" == "Linux" ]; then
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg integrate install
        elif [ "$RUNNER_OS" == "Windows" ]; then
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg integrate install
        fi
      shell: bash

    - name: Build the project
      run: |
        mkdir build
        cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
        if [ "$RUNNER_OS" == "Linux" ]; then
          cmake --build build --config Release -- -j 4
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build build --config Release -- /m
        fi
      shell: bash

    - name: Archive files
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          tar czf $app_name.tar.gz build/$app_name build/.env
        elif [ "$RUNNER_OS" == "Windows" ]; then
          Compress-Archive -Path build/$env:app_name, build/.env -DestinationPath $env:app_name.zip -Force
        fi
      shell: bash
      env:
        app_name: ${{ env.app_name }}

    - name: Upload archive
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.app_name }}-${{ matrix.os }}
        path: |
          ${{ env.app_name }}.*
